{
	"name": "E100 Assembly",
	"scopeName": "source.easm",
	"fileTypes": [
		"e",
		"e100",
		"easm"
	],
	"uuid": "2ab58527-fa06-43ab-ba1c-adee8c7bb7d1",
	"patterns": [
		{
			"comment": "comments (single line)",
			"name": "comment.line.double-slash",
			"match": "\\s*\/\/.*\n?$"
		},
		{
			"comment": "preprocessor directive(s)",
			"name": "meta.preprocessor",
			"match": "^(#include)\\s+(\\w*\\.(?:e|e100|easm))\\s*\\n?$",
			"captures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"name": "string.unquoted"
				}
			}
		},
		{
			"comment": ".data statements",
			"name": "meta.variable",
			"match": "^(?:(\\d+\\w*)|([^\\d]?\\w*))\\s+(\\.data)\\s+(0[xX][\\da-fA-F]+|\\d+)(?:\\s*|(?:\\s+(.*)))\\n?$",
			"captures": {
				"1": {
					"name": "invalid.illegal"
				},
				"2": {
					"name": "variable.parameter"
				},
				"3": {
					"name": "variable.language"
				},
				"4": {
					"name": "constant.numeric"
				},
				"5": {
					"name": "invalid.illegal"
				}
			}
		},
		{
			"comment": "halt statement (no arguments)",
			"name": "meta.statement",
			"match": "^(?:(\\d+\\w*)|([^\\d]?\\w*))\\s+(halt)(?:(?:\\s+(\\w*\\s*\\w*\\s*\\w*))|\\s*)(?:\\s*|(?:\\s+(.*)))\\n?$",
			"captures": {
				"1": {
					"name": "invalid.illegal"
				},
				"2": {
					"name": "variable.parameter"
				},
				"3": {
					"name": "keyword.control"
				},
				"4": {
					"name": "support.constant"
				},
				"5": {
					"name": "invalid.illegal"
				}
			}
		},
		{
			"comment": "ret statemnt (one argument)",
			"name": "meta.statement",
			"match": "^(?:(\\d+\\w*)|([^\\d]?\\w*))\\s+(ret)\\s+(?:(0[xX][\\da-fA-F]+|\\d+)|(\\d+\\w+)|([^\\d]\\w+))(?:(?:\\s+(\\w*\\s*\\w*))|\\s*)(?:\\s*|(?:\\s+(.*)))\\n?$",
			"captures": {
				"1": {
					"name": "invalid.illegal"
				},
				"2": {
					"name": "variable.parameter"
				},
				"3": {
					"name": "keyword.control"
				},
				"4": {
					"name": "constant.numeric"
				},
				"5": {
					"name": "invalid.illegal"
				},
				"6": {
					"name": "variable.parameter"
				},
				"7": {
					"name": "support.constant"
				},
				"8": {
					"name": "invalid.illegal"
				}
			}
		},
		{
			"comment": "two-argument opcode statements",
			"name": "meta.statement",
			"match": "^(?:(\\d+\\w*)|([^\\d]?\\w*))\\s+(call|cp|not)\\s+(?:(0[xX][\\da-fA-F]+|\\d+)|(\\d+\\w+)|([^\\d]\\w*))\\s+(?:(0[xX][\\da-fA-F]+|\\d+)|(\\d+\\w+)|([^\\d]\\w*))(?:(?:\\s+(\\w*))|\\s*)(?:\\s*|(?:\\s+(.*)))\\n?$",
			"captures": {
				"1": {
					"name": "invalid.illegal"
				},
				"2": {
					"name": "variable.parameter"
				},
				"3": {
					"name": "keyword.control"
				},
				"4": {
					"name": "constant.numeric"
				},
				"5": {
					"name": "invalid.illegal"
				},
				"6": {
					"name": "variable.parameter"
				},
				"7": {
					"name": "constant.numeric"
				},
				"8": {
					"name": "invalid.illegal"
				},
				"9": {
					"name": "variable.parameter"
				},
				"10": {
					"name": "support.constant"
				},
				"11": {
					"name": "invalid.illegal"
				}
			}
		},
		{
			"comment": "three-argument opcode statements",
			"name": "meta.statement",
			"match": "^(?:(\\d+\\w*)|([^\\d]?\\w*))\\s+(add|sub|mult|div|and|or|sl|sr|cpfa|cpta|be|bne|blt)\\s+(?:(0[xX][\\da-fA-F]+|\\d+)|(\\d+\\w+)|([^\\d]\\w*))\\s+(?:(0[xX][\\da-fA-F]+|\\d+)|(\\d+\\w+)|([^\\d]\\w*))\\s+(?:(0[xX][\\da-fA-F]+|\\d+)|(\\d+\\w+)|([^\\d]\\w*))(?:\\s*|(?:\\s+(.*)))\\n?$",
			"captures": {
				"1": {
					"name": "invalid.illegal"
				},
				"2": {
					"name": "variable.parameter"
				},
				"3": {
					"name": "keyword.control"
				},
				"4": {
					"name": "constant.numeric"
				},
				"5": {
					"name": "invalid.illegal"
				},
				"6": {
					"name": "variable.parameter"
				},
				"7": {
					"name": "constant.numeric"
				},
				"8": {
					"name": "invalid.illegal"
				},
				"9": {
					"name": "variable.parameter"
				},
				"10": {
					"name": "constant.numeric"
				},
				"11": {
					"name": "invalid.illegal"
				},
				"12": {
					"name": "variable.parameter"
				},
				"13": {
					"name": "invalid.illegal"
				}
			}
		}
	]
}